from django.db import connection
from datetime import datetime

def get_employees_with_email_counts(start_date, end_date, x_sent, x_received):
    with connection.cursor() as cursor:
        cursor.execute('''
            SELECT 
                e.id AS employee_id,
                e.last_name,
                e.first_name,
                COUNT(DISTINCT CASE WHEN em.date_send BETWEEN %s AND %s AND ae.estInterne THEN em.id END) AS internal_emails_sent,
                COUNT(DISTINCT CASE WHEN rm.date_received BETWEEN %s AND %s AND ae.estInterne THEN rm.email_id END) AS internal_emails_received,
                COUNT(DISTINCT CASE WHEN em.date_send BETWEEN %s AND %s AND NOT ae.estInterne THEN em.id END) AS external_emails_sent,
                COUNT(DISTINCT CASE WHEN rm.date_received BETWEEN %s AND %s AND NOT ae.estInterne THEN rm.email_id END) AS external_emails_received
            FROM 
                Employee e
            LEFT JOIN 
                Email em ON e.id = em.sender_id
            LEFT JOIN 
                ReceiversMail rm ON rm.addresse_email_id = e.id
            LEFT JOIN 
                AddresseEmail ae ON ae.employee_id = e.id
            WHERE 
                (
                    em.date_send BETWEEN %s AND %s
                    OR rm.date_received BETWEEN %s AND %s
                )
            GROUP BY 
                e.id, e.last_name, e.first_name
            HAVING 
                (
                    COUNT(DISTINCT CASE WHEN em.date_send BETWEEN %s AND %s AND ae.estInterne THEN em.id END) > %s
                    OR COUNT(DISTINCT CASE WHEN rm.date_received BETWEEN %s AND %s AND ae.estInterne THEN rm.email_id END) > %s
                    OR COUNT(DISTINCT CASE WHEN em.date_send BETWEEN %s AND %s AND NOT ae.estInterne THEN em.id END) > %s
                    OR COUNT(DISTINCT CASE WHEN rm.date_received BETWEEN %s AND %s AND NOT ae.estInterne THEN rm.email_id END) > %s
                );
        ''', [
            start_date, end_date, 
	    start_date, end_date,
            start_date, end_date, 
	    start_date, end_date,

            start_date, end_date,
	    start_date, end_date,

            start_date, end_date, x_sent, 
            start_date, end_date, x_received,
            start_date, end_date, x_sent, 
            start_date, end_date, x_received
        ])
        
        results = cursor.fetchall()
    
    for row in results:
        print(f"Employee ID: {row[0]}, Last Name: {row[1]}, First Name: {row[2]}, Internal Emails Sent: {row[3]}, Internal Emails Received: {row[4]}, External Emails Sent: {row[5]}, External Emails Received: {row[6]}")

# Utilisation de la fonction
start_date = '2001-01-01'
end_date = '2001-12-31'
x_sent = 50
x_received = 50

get_employees_with_email_counts(start_date, end_date, x_sent, x_received)